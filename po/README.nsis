gettext integration in NSIS
===========================

This document describes briefly how the integration of gettext and
NSIS works.  Note that earlier versions used the standard GNU gexttext
framework but this turned to be complicated for the now used VPATH
builds.


1. Preparation of sources

Do not use the usual gettextize things.  We use a much simpler build
system becuase we oply need to include nsis include files from the po
files.

To add new languages add them to the LINGUAS file.  To add new NSIS
scripts with translatable strings add them to POTFILES


2. xgettext wrapper

The script nsis-xgettext.awk is used to extract all lines from the
POTFILES that start with "LangString" (with no whitespace at the
beginning of the line).  Language strings stretching multiple lines
via trailing backslashes are supported.  It also also transforms them
into C function calls which are then parsed by xgettext.  Because we
use #line directives, positional indicators (filename/line number) are
preserved in the .po file.


3. msgfmt replacement

The LANG.nsi files are created from the respective LANG.po files with
the nsis-msgfmt.c program, which needs to be compiled on the build
platform and uses the libgettextpo library to parse the LANG.po files
and produces output suitable for NSIS.  The program can generate files
usable for vanilla NSIS and Modern UI (hard coded in a global variable
in the source code).

LANG.nsi are included in the distribution because they are fast to
generate.


4. catalogs.nsi

As a side-effect of "make all" (that is, at normal compile time), the
Rules-nsis Makefile extension also creates a file catalogs.nsi, which
contains one !include directive for every language from the catalogs
the user selected at compile time.

The file catalogs.nsi needs to be included twice, once which PO_HEADER
defined and once without.  The header should be included early, while
the language strings should be included late.


5. Preparation of NSIS project

The NSIS project should only include the code for the English
language.  All .nsi files which contain LangString directives should
be added to POFILES.in.  The NSIS project should have a directive:

!addincludedir "${TOP_SRCDIR}/po"

so that inclusion of catalogs.nsi will find the LANG.nsi files.  Near
the end of the project's master NSI file you should include all
translation strings:

!include "catalogs.nsi"

That's it.  Enjoy!

Marcus Brinkmann
mb@g10code.com


This file
=========

Copyright 2007 g10 Code GmbH

This file is free software; as a special exception the author gives
unlimited permission to copy and/or distribute it, with or without
modifications, as long as this notice is preserved.

This file is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
