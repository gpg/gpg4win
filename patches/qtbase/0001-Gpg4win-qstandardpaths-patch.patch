#! /bin/sh
patch -p1 -f -l $* < $0
exit $?

From ec9c327d811b4a7c489d42ae45d0fb69443ab30f Mon Sep 17 00:00:00 2001
From: Andre Heinecke <aheinecke@gnupg.org>
Date: Wed, 22 Jul 2020 13:17:21 +0200
Subject: [PATCH 1/2] Gpg4win-qstandardpaths-patch

---
 src/corelib/io/qstandardpaths.cpp     | 72 +++++++++++++++++++++++++++
 src/corelib/io/qstandardpaths.h       |  2 +
 src/corelib/io/qstandardpaths_win.cpp |  4 +-
 3 files changed, 77 insertions(+), 1 deletion(-)

--- a/src/corelib/io/qstandardpaths.cpp
+++ b/src/corelib/io/qstandardpaths.cpp
@@ -20,6 +20,13 @@
 #include <unistd.h>
 #endif

+#if !defined(QT_BUILD_QMAKE) && !defined(QT_NO_SETTINGS)  && !defined(QT_BOOTSTRAPPED)
+#include <qsettings.h>
+#endif
+#ifdef Q_OS_WIN
+#include <windows.h>
+#endif
+
 #ifndef QT_NO_STANDARDPATHS

 QT_BEGIN_NAMESPACE
@@ -626,6 +633,75 @@ bool QStandardPaths::isTestModeEnabled()
     return qsp_testMode;
 }

+#if !defined(QT_BUILD_QMAKE) && !defined(QT_NO_SETTINGS) && !defined(QT_BOOTSTRAPPED)
+static const char standardPathsSection[] = "StandardPaths";
+static QSettings *findConfiguration()
+{
+    QString qtconfig = QStringLiteral(":/qt/etc/qt.conf");
+    if (QFile::exists(qtconfig))
+        return new QSettings(qtconfig, QSettings::IniFormat);
+    if (QCoreApplication::instance()) {
+        QDir pwd(QCoreApplication::applicationDirPath());
+        qtconfig = pwd.filePath(QLatin1String("qt.conf"));
+        if (QFile::exists(qtconfig))
+            return new QSettings(qtconfig, QSettings::IniFormat);
+    }
+    return 0;     //no luck
+}
+#endif
+
+QString QStandardPaths::presetLocation(StandardLocation type)
+{
+#if !defined(QT_BUILD_QMAKE) && !defined(QT_NO_SETTINGS) && !defined(QT_BOOTSTRAPPED)
+    QStringList locations = QStringList()   << QStringLiteral("DesktopLocation")
+                                            << QStringLiteral("DocumentsLocation")
+                                            << QStringLiteral("FontsLocation")
+                                            << QStringLiteral("ApplicationsLocation")
+                                            << QStringLiteral("MusicLocation")
+                                            << QStringLiteral("MoviesLocation")
+                                            << QStringLiteral("PicturesLocation")
+                                            << QStringLiteral("TempLocation")
+                                            << QStringLiteral("HomeLocation")
+                                            << QStringLiteral("DataLocation")
+                                            << QStringLiteral("CacheLocation")
+                                            << QStringLiteral("GenericDataLocation")
+                                            << QStringLiteral("RuntimeLocation")
+                                            << QStringLiteral("ConfigLocation")
+                                            << QStringLiteral("DownloadLocation")
+                                            << QStringLiteral("GenericCacheLocation")
+                                            << QStringLiteral("GenericConfigLocation")
+                                            << QStringLiteral("AppDataLocation")
+                                            << QStringLiteral("AppConfigLocation")
+                                            << QStringLiteral("AppLocalDataLocation");
+
+    QScopedPointer<const QSettings> settings(findConfiguration());
+    if (!settings.isNull()) {
+        QString key = QLatin1String(standardPathsSection);
+        key += QLatin1Char('/');
+        key += locations[type];
+        const QString value = settings->value(key).toString();
+#ifdef Q_OS_WIN
+        if (!value.contains(QLatin1Char('%')))
+#endif
+            return value;
+#ifdef Q_OS_WIN
+        wchar_t expandedPath[MAX_PATH] = {0};
+        if (ExpandEnvironmentStrings((wchar_t*)value.utf16(), expandedPath, MAX_PATH)) {
+            const auto expanded = QString::fromWCharArray(expandedPath).replace(QLatin1Char('\\'), QLatin1Char('/'));
+            if (expanded.contains(QLatin1Char('%'))) {
+                OutputDebugString(L"QStandardPaths::presetLocation - Not all environment variables in qt.conf could be expanded.");
+                return QString();
+            }
+            return expanded;
+        }
+        OutputDebugString(L"QStandardPaths::presetLocation - Expanding environment variables in qt.conf failed.");
+#endif
+    }
+#endif // !QT_BUILD_QMAKE && !QT_NO_SETTINGS
+
+    return QString();
+}
+

 QT_END_NAMESPACE

--- a/src/corelib/io/qstandardpaths.h
+++ b/src/corelib/io/qstandardpaths.h
@@ -66,6 +66,8 @@
     static bool isTestModeEnabled();

 private:
+    static QString presetLocation(StandardLocation type);
+
     // prevent construction
     QStandardPaths();
     ~QStandardPaths();
--- a/src/corelib/io/qstandardpaths_win.cpp
+++ b/src/corelib/io/qstandardpaths_win.cpp
@@ -157,7 +157,9 @@

 QString QStandardPaths::writableLocation(StandardLocation type)
 {
-    QString result;
+    QString result = QStandardPaths::presetLocation(type);
+    if (!result.isEmpty())
+        return result;
     switch (type) {
     case CacheLocation:
         // Although Microsoft has a Cache key it is a pointer to IE's cache, not a cache
