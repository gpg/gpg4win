#! /bin/sh
patch -p1 -f -l $* < $0
exit $?

From 0bce93f5d58a2434076e3a0e1d9a81bed1862a89 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Ingo=20Kl=C3=B6cker?= <dev@ingo-kloecker.de>
Date: Tue, 15 Jul 2025 11:30:53 +0200
Subject: [PATCH 1/2] Use highlight text color and omit custom text coloring
 for selected item

The highlight background may have bad contrast to the custom text colors
(placeholder text, link text) which KCommandBar uses for drawing the item
text, especially if highlighted text has inverted text color (as for Breeze
Light). Therefore, it's better to omit the custom color formats for the
selected item.
---
 src/kcommandbar.cpp | 70 +++++++++++++++++++++++++++------------------
 1 file changed, 42 insertions(+), 28 deletions(-)

diff --git a/src/kcommandbar.cpp b/src/kcommandbar.cpp
index 147cbb2f..495160ac 100644
--- a/src/kcommandbar.cpp
+++ b/src/kcommandbar.cpp
@@ -155,6 +155,19 @@ private:
 };
 // END CommandBarFilterModel

+static QColor getTextColor(const QStyleOptionViewItem &option)
+{
+    QPalette::ColorGroup cg = option.state & QStyle::State_Enabled ? QPalette::Normal : QPalette::Disabled;
+    if (cg == QPalette::Normal && !(option.state & QStyle::State_Active)) {
+        cg = QPalette::Inactive;
+    }
+
+    if (option.state & QStyle::State_Selected) {
+        return option.palette.color(cg, QPalette::HighlightedText);
+    }
+    return option.palette.color(cg, QPalette::Text);
+}
+
 class CommandBarStyleDelegate final : public QStyledItemDelegate
 {
     Q_OBJECT
@@ -216,6 +229,8 @@ public:
          */
         QStyleOptionViewItem option = opt;
         initStyleOption(&option, index);
+        const bool isSelected = option.state & QStyle::State_Selected;
+
         option.text.clear(); // clear old text
         QStyle *style = option.widget->style();
         style->drawControl(QStyle::CE_ItemViewItem, &option, painter, option.widget);
@@ -234,39 +249,38 @@ public:
             }
         }

+        QList<QTextLayout::FormatRange> formats;
         const QString original = index.data().toString();
-        QStringView str = original;
-        int componentIdx = original.indexOf(QLatin1Char(':'));
-        int actionNameStart = 0;
-        if (componentIdx > 0) {
-            actionNameStart = componentIdx + 2;
-            // + 2 because there is a space after colon
-            str = str.mid(actionNameStart);
-        }
+        if (!isSelected) {
+            // omit custom text coloring if item is selected because the contrast ratio between the custom text colors
+            // and highlight background is often bad, especially if highlighted text has inverted text color
+            QStringView str = original;
+            int componentIdx = original.indexOf(QLatin1Char(':'));
+            int actionNameStart = 0;
+            if (componentIdx > 0) {
+                actionNameStart = componentIdx + 2;
+                // + 2 because there is a space after colon
+                str = str.mid(actionNameStart);
+
+                QTextCharFormat gray;
+                gray.setForeground(option.palette.placeholderText());
+                formats.append({0, componentIdx, gray});
+            }

-        QList<QTextLayout::FormatRange> formats;
-        if (componentIdx > 0) {
-            QTextCharFormat gray;
-            gray.setForeground(option.palette.placeholderText());
-            formats.append({0, componentIdx, gray});
+            /*
+             * Highlight matches from fuzzy matcher
+             */
+            const auto fmtRanges = KFuzzyMatcher::matchedRanges(m_filterString, str);
+            QTextCharFormat f;
+            f.setForeground(option.palette.link());
+            formats.reserve(formats.size() + fmtRanges.size());
+            std::transform(fmtRanges.begin(), fmtRanges.end(), std::back_inserter(formats), [f, actionNameStart](const KFuzzyMatcher::Range &fr) {
+                return QTextLayout::FormatRange{fr.start + actionNameStart, fr.length, f};
+            });
         }

-        QTextCharFormat fmt;
-        fmt.setForeground(option.palette.link());
-        fmt.setFontWeight(QFont::Bold);
-
-        /**
-         * Highlight matches from fuzzy matcher
-         */
-        const auto fmtRanges = KFuzzyMatcher::matchedRanges(m_filterString, str);
-        QTextCharFormat f;
-        f.setForeground(option.palette.link());
-        formats.reserve(formats.size() + fmtRanges.size());
-        std::transform(fmtRanges.begin(), fmtRanges.end(), std::back_inserter(formats), [f, actionNameStart](const KFuzzyMatcher::Range &fr) {
-            return QTextLayout::FormatRange{fr.start + actionNameStart, fr.length, f};
-        });
-
         textRect.adjust(hMargin, 0, -hMargin, 0);
+        painter->setPen(getTextColor(option));
         paintItemText(painter, original, textRect, option, std::move(formats));

         painter->restore();
--
2.50.1
